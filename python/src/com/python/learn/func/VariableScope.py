# 在程序中定义一个变量时，这个变量是有作用范围的，变量的作用范围被称为它的作用域。换句话说，变量的作用域指的是程序代码能够访问该变量的区域，如果超过该区域，将无法访问该变量。
#
# 根据定义变量的位置（有效范围），可以将变量分为局部变量和全局变量。
#
# Python局部变量
#
# 局部变量是指在函数内部定义并使用的变量，它只在函数内部有效。
#
# 每个函数在执行时，系统都会为该函数分配一块“临时内存空间”，所有的局部变量都被保存在这块临时内存空间内。当函数执行完成后，这块内存空间就被释放了，这些局部变量也就失效了，因此离开
# 函数之后就不能再访问局部变量了，否则解释器会抛出 NameError 错误
def text():
    local_variable = "hello"


# 此处获取局部变量值会引发错误
# print(local_variable)

# Python全局变量
# 和局部变量相对应，全局变量指的是能作用于函数内外的变量，即全局变量既可以在各个函数的外部使用，也可以在各函数内部使用。
#
# 定义全局变量的方式有以下 2 种：
# 在函数体外定义的变量，一定是全局变量，例如
globalVariables = "全局变量"


def global_func():
    # 注意，在使用 global 关键字修饰变量名时，不能直接给变量赋初值，否则会引发语法错误。
    global hello
    hello = "全局变量"
    print(hello, globalVariables)


# 全部变量在函数外部的使用，必须在调用函数之后才能使用
global_func()
print(hello, globalVariables)


# 获取指定作用域范围中的变量
#
# 不管是在函数的局部范围内还是在全局范围内，都可能存在多个变量，每个变量“持有”该变量的值。从这个角度来看，不管是局部范围还是全局范围，这些变量和它们的值就像
# 一个“看不见”的字典，其中变量名就是字典的 key，变量值就是字典的 value。实际上，Python 提供了如下三个工具函数来获取指定范围内的“变量字典”：
#
#   globals()：该函数返回全局范围内所有变量组成的“变量字典”。
#   locals()：该函数返回当前局部范围内所有变量组成的“变量字典”。
#   vars(object)：获取在指定对象范围内所有变量组成的“变量字典”。如果不传入object 参数，vars() 和 locals() 的作用完全相同。
#
# globals() 和 locals() 看似完全不同，但它们实际上也是有联系的，关于这两个函数的区别和联系大致有以下两点：
#
#   locals() 总是获取当前局部范围内所有变量组成的“变量字典”，因此，如果在全局范围内（在函数之外）调用 locals() 函数，同样会获取全局范围内所有变量组成的“变量字
#   典”；而 globals() 无论在哪里执行，总是获取全局范围内所有变量组成的“变量字典”。
#   一般来说，使用 locals() 和 globals() 获取的“变量字典”只应该被访问，不应该被修改。但实际上，不管是使用 globals() 还是使用 locals() 获取的全局范围内的“变量
#   字典”，都可以被修改，而这种修改会真正改变全局变量本身：但通过 locals() 获取的局部范围内的“变量字典”，即使对它修改也不会影响局部变量。

def test():
    age = 20
    # 直接访问age局部变量
    print(age)  # 输出20
    # 访问函数局部范围的“变量数组”
    print(locals())  # {'age': 20}
    # 通过函数局部范围的“变量数组”访问age变量
    print(locals()['age'])  # 20
    # 通过locals函数局部范围的“变量数组”改变age变量的值
    locals()['age'] = 12
    # 再次访问age变量的值
    print('xxx', age)  # 依然输出20
    # 通过globals函数修改x全局变量
    globals()['x'] = 19


# 在使用 globals() 或 locals() 访问全局变量的“变量字典”时，将会看到程序输出的“变量字典”默认包含了很多变量，这些都是 Python 主程序内置的，读者暂时不用理会它们。
x = 5
y = 20
print(globals())  # {..., 'x': 5, 'y': 20}
# 在全局访问内使用locals函数，访问的是全局变量的“变量数组”
print(locals())  # {..., 'x': 5, 'y': 20}
# 直接访问x全局变量
print(x)  # 5
# 通过全局变量的“变量数组”访问x全局变量
print(globals()['x'])  # 5
# 通过全局变量的“变量数组”对x全局变量赋值
globals()['x'] = 39
print(x)  # 输出39
# 在全局范围内使用locals函数对x全局变量赋值
locals()['x'] = 99
print(x)  # 输出99
